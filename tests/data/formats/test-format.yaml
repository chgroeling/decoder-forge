context:
  members: [context0, context1]

struct_def:
  StructA: {members: [ra0, ra1]}
  StructB: { }
  StructC: {members: [rc0, rc1]}
  StructD: {members: [rd0]}
  Unpred: {members: [instr]}
  
deffun:
  extract_bit:
    op: and
    args:
    - {op: braces, expr: {op: shiftright, left: instr, right: $lsb}}
    - {op: eval, expr: "hex((1 << (int($msb)-int($lsb)+1)) - 1)"}

  extract_bit_and_assign:
    op: assign
    target: $res
    expr:
      op: call
      expr: "extract_bit(msb=$msb, lsb=$lsb)"

  extract_rd0: 
    op: call
    expr: "extract_bit_and_assign(res=rd0, msb=5, lsb=3)"
    comment: "rd0 = instr[5:3]"
    
  set_ra0_1 : {op: assign, target: ra0, expr: "1", comment: "ra_0"}
  set_ra1_2 : {op: assign, target: ra1, expr: "2", comment: "ra_1"}
  set_rc01 :
    op: seq
    exprs:
    - op: assign
      target: rc0
      expr: "1"
      comment: "rc_0"
    - op: assign
      target: rc1
      expr: "2"
      comment: "rc_1"
  
  set_context_cafe: {op: assign, target: context.context1, expr: "0xCAFE"}

  if_bit0:
    op: if
    cond: 
      op: is_equal
      left:
        op: call
        expr: "extract_bit(msb=5,lsb=3)"
      right: "0x3"
    then:
      op: seq
      exprs:
      - op: assign
        target: context.context0
        expr: "0xFF"
        comment: "set context0"
      - op: return
        comment: "call if 0x3"
        expr: "Unpred(instr)"
  
patterns:
  00xxx00x: {name: instr_A0, to: StructA, call: [set_ra0_1(), set_ra1_2()]}
  00xxx01x: {name: instr_A1, to: StructA, call: [set_ra0_1(), set_ra1_2()]}
  010xxxxx: {name: instr_B0, to: StructB, call: [set_context_cafe()]}
  011xxxxx: {name: instr_UNDEF0}
  10xxxxxx: {name: instr_UNDEF1}
  111xxxxx: {name: instr_C0, to: StructC, call: [if_bit0(), set_rc01()]}
  110xxxxx: {name: instr_C1, to: StructC, call: [set_rc01()]}
  00xxx111: {name: instr_D0, to: StructD, call: [extract_rd0()]}
