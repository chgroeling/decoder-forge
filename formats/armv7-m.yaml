context:
  members: [istate, apsr]

struct_def:
  AdcImmediate: {members: [flags, d, n, imm32]}
  AdcRegister: {members: [flags, d, n, m, shift_t, shift_n]}
  AddImmediate: {members: [flags, d, n, imm32]}
  AddPcPlusImmediate: {members: [flags, d, imm32]}
  AddRegister: {members: [flags]}
  AddSpPlusImmediate: {members: [flags]}
  AndImmediate: {members: [flags]}
  AndRegister: {members: [flags]}
  AsrImmediate: {members: [flags]}
  AsrRegister: {members: [flags]}
  B: {members: [flags]}
  Bfi: {members: [flags]}
  BicImmediate: {members: [flags]}
  BicRegister: {members: [flags]}
  Bkpt: {members: [flags, imm32]}
  Bl: {members: [flags, imm32]}
  Blx: {members: [flags]}
  Bx: {members: [flags]}
  CbNZ: {members: [flags]}
  Clz: {members: [flags]}
  CmnImmediate: {members: [flags]}
  CmpImmediate: {members: [flags]}
  CmpRegister: {members: [flags]}
  Dmb: {members: [flags]}
  EorImmediate: {members: [flags]}
  EorRegister: {members: [flags]}
  It: {members: [flags]}
  Ldm: {members: [flags]}
  LdrImmediate: {members: [flags]}
  LdrLiteral: {members: [flags, t, imm32]}
  LdrRegister: {members: [flags]}
  LdrbImmediate: {members: [flags]}
  LdrbRegister: {members: [flags]}
  LdrdImmediate: {members: [flags]}
  Ldrex: {members: [flags]}
  LdrhImmediate: {members: [flags]}
  LdrhRegister: {members: [flags]}
  LdrsbImmediate: {members: [flags]}
  LdrshImmediate: {members: [flags]}
  LslImmediate: {members: [flags]}
  LslRegister: {members: [flags]}
  LsrImmediate: {members: [flags, d, m, shift_n]}
  LsrRegister: {members: [flags]}
  Mla: {members: [flags]}
  Mls: {members: [flags]}
  MovImmediate: {members: [flags, d, imm32]}
  MovRegister: {members: [flags, d, m]}
  Mrs: {members: [flags]}
  Msr: {members: [flags]}
  Mul: {members: [flags]}
  MvnImmediate: {members: [flags]}
  MvnRegister: {members: [flags]}
  Nop: {members: [flags]}
  OrrImmediate: {members: [flags]}
  OrrRegister: {members: [flags]}
  Pop: {members: [flags]}
  Push: {members: [flags]}
  Rrx: {members: [flags]}
  RsbImmediate: {members: [flags]}
  RsbRegister: {members: [flags]}
  SbcImmediate: {members: [flags]}
  SbcRegister: {members: [flags]}
  Sdiv: {members: [flags]}
  Smull: {members: [flags]}
  Stm: {members: [flags]}
  Stmdb: {members: [flags]}
  StrImmediate: {members: [flags]}
  StrRegister: {members: [flags]}
  StrbImmediate: {members: [flags]}
  StrbRegister: {members: [flags]}
  StrdImmediate: {members: [flags]}
  Strex: {members: [flags]}
  StrhImmediate: {members: [flags]}
  StrhRegister: {members: [flags]}
  SubImmediate: {members: [flags]}
  SubRegister: {members: [flags]}
  SubSpMinusImmediate: {members: [flags]}
  Svc: {members: [flags]}
  Sxtb: {members: [flags]}
  Sxth: {members: [flags]}
  TbbH: {members: [flags]}
  TeqImmediate: {members: [flags]}
  TeqRegister: {members: [flags]}
  TstImmediate: {members: [flags]}
  TstRegister: {members: [flags]}
  Ubfx: {members: [flags]}
  Udiv: {members: [flags]}
  Umlal: {members: [flags]}
  Umull: {members: [flags]}
  Uxtb: {members: [flags]}
  Uxth: {members: [flags]}
  Unpredictable: {members: [code]}
  
deffun:

  # Generic functions
  # ===
  extract_bit:
    op: and
    args:
    - op: braces
      expr:
        op: shiftright
        left: $val
        right:
          op: eval
          expr: "int($lsb.split('.')[-1]) + (16 if $lsb.startswith('l.') else 0)"
    - {op: eval, expr: "hex((1 << (int($msb.split('.')[-1]) + (16 if $msb.startswith('l.') else 0)-int(int($lsb.split('.')[-1]) + (16 if $lsb.startswith('l.') else 0))+1)) - 1)"}

  extract_bit_and_assign:
    op: assign
    target: $res
    expr: {op: call, expr: "extract_bit(val=code, msb=$msb, lsb=$lsb)"}

  # bit_mask 1 << $bit
  bit_mask:
    op: braces
    expr: {op: shiftleft, left: 1, right: $bit}
    
  append_bitmask:
    op: assign
    target: $val
    expr: {op: or, args: [flags, $bm]}

  # $res = 1 if lsb(a) == lsb(b) else 0
  lsb_equal_and_assign:
    op: assign
    target: $res
    expr:
      op: and
      args:
      - "0x1"
      - op: braces
        expr:
          op: not
          expr:
            op: braces
            expr: {op: xor, args: [$a, $b]}

  sign_extend_and_assign:
    op: assign
    target: $res
    expr:
      op: sub
      args:
      - op: braces
        expr: {op: xor, args: [$value, {op: call, expr: "bit_mask(bit=$sign_bit)"}]}
      - op: call
        expr: "bit_mask(bit=$sign_bit)"

  # 32 bit ror operation
  ror_c:
    op: seq
    exprs:
      - op: assign
        target: _n
        expr: {op: mod, args: ["$shift", "32"]}
      - op: assign
        target: _m
        expr: {op: sub, args: ["32", "_n"]}
      - op: assign
        target: $res
        expr:
          op: or
          args:
          - op: braces
            expr: {op: shiftright, left: $val, right: _n}
          - op: braces
            expr: {op: shiftleft, left: $val, right: _m}
      - op: assign
        target: $carry_out
        expr:
          op: call
          expr: "extract_bit(val=$res, msb=31, lsb=31)"

  # SRType_None = 0b000,  
  # SRType_LSL  = 0b001,
  # SRType_LSR  = 0b010,
  # SRType_ASR  = 0b011,
  # SRType_ROR  = 0b100,
  # SRType_RRX  = 0b101
  DecodeImmShift:
    op: switch
    var: "$cond"
    case:
    - when: "0b00"
      then:
        op: seq
        exprs:
        - {op: assign, target: $shift_t, expr: "0b001", comment: "SRType_LSL"} # type = SRType_LSL
        - {op: assign, target: $shift_n, expr: "$imm5"}
    - when: "0b01"
      then:
        op: seq
        exprs:
        - {op: assign, target: $shift_t, expr: "0b010", comment: "SRType_LSR"}  # type = SRType_LSR
        - op: if
          cond: {op: is_equal, left: "$imm5", right: "0x0"}
          then: {op: assign, target: $shift_n, expr: "32"}
          else: {op: assign, target: $shift_n, expr: "$imm5"}
    - when: "0b10"
      then:
        op: seq
        exprs:
        - {op: assign, target: $shift_t, expr: "0b011", comment: "SRType_ASR"}  # type = SRType_ASR
        - op: if
          cond: {op: is_equal, left: "$imm5", right: "0x0"}
          then: {op: assign, target: $shift_n, expr: "32"}
          else: {op: assign, target: $shift_n, expr: "$imm5"}
    - when: "0b11"
      then:
        op: seq
        exprs:
        - op: if
          cond: {op: is_equal, left: "$imm5", right: "0x0"}
          then:
            op: seq
            exprs:
            - {op: assign, target: $shift_t, expr: "0b101", comment: "SRType_RRX"}  # type = SRType_RRX
            - {op: assign, target: $shift_n, expr: "1"}
          else:
            op: seq
            exprs:
            - {op: assign, target: $shift_t, expr: "0b100", comment: "SRType_ROR"}  # type = SRType_ROR
            - {op: assign, target: $shift_n, expr: "$imm5"}

  # Istate
  # ===  
  extract_istate_b3_0: {op: and, args: [context.istate, "0b1111"]}
  in_it_block: {op: is_not_equal, left: {op: call, expr: "extract_istate_b3_0()"}, right: "0b0000"}
  last_in_it_block: {op: is_equal, left: {op: call, expr: "extract_istate_b3_0()"}, right: "0b1000"}


  # APSR
  # ===
  
  # get carry condition flag
  get_apsr_carry: {op: call, expr: "extract_bit(val=context.apsr, msb=29, lsb=29)"}

  # Flags
  # ===  
  flag_32bit: {op: call, expr: bit_mask(bit=0)}
  flag_set: {op: call, expr: bit_mask(bit=1)}
  flag_add: {op: call, expr: bit_mask(bit=2)}
  flag_carry: {op: call, expr: bit_mask(bit=3)}

  # set to initial value
  set_flags_16bit: {op: assign, target: flags, expr: "0x0", comment: "16Bit instruction"}
  set_flags_32bit: {op: assign, target: flags, expr: {op: call, expr: flag_32bit()}, comment: "32Bit instruction"}

  # Definition of different flags
  append_flags_set: {op: call, expr: "append_bitmask(val=flags, bm=&flag_set)", comment: "flags |= Set"}
  append_flags_add: {op: call, expr: "append_bitmask(val=flags, bm=&flag_add)", comment: "flags |= Add"}
  append_flags_carry: {op: call, expr: "append_bitmask(val=flags, bm=&flag_carry)", comment: "flags |= Carry"}

  is_set_bit: {op: is_not_equal, left: {op: and, args: [flags, {op: call, expr: "flag_set()"}]}, right: "0b0000"}


  append_flags_set_not_it_block:
    op: if
    cond: {op: logical_not, expr: {op: call, expr: "in_it_block()"}}
    then: {op: call, expr: "append_flags_set()"}

  append_flags_set_s_20:
    op: if
    cond: {op: is_equal, left: {op: call, expr: "extract_bit(val=code, msb=l.4, lsb=l.4)"}, right: "1"}
    then: {op: call, expr: "append_flags_set()"}

  append_flags_add_u_23:
    op: if
    cond: {op: call, expr: "extract_bit(val=code, msb=l.7, lsb=l.7)"}
    then: {op: call, expr: "append_flags_add()"}

  append_flags_carry_if_apsr_c:
    op: if
    cond: {op: is_not_equal, left: {op: call, expr: "get_apsr_carry()"}, right: "0"}
    then: {op: call, expr: "append_flags_carry()"}



  # Check if unpred
  # ===
  
  # if InITBlock() && !LastInITBlock() then UNPREDICTABLE;
  unpred_if_it_block_not_last_in_it_block:
    op: if
    cond:
      op: logical_and
      args:
      - {op: braces, expr: {op: call, expr: "in_it_block()"}}
      - {op: logical_not,expr: {op: braces, expr: {op: call, expr: "last_in_it_block()"}}}
    then: {op: return, expr: "Unpredictable(code)"}

  # if $x == 15 && InITBlock() && !LastInITBlock() then UNPREDICTABLE;
  unpred_if_x_pc_it_block_not_last_in_it_block:
    op: if
    cond:
      op: logical_and
      args:
      - {op: braces, expr: {op: is_equal, left: "$x", right: "15"}}
      - {op: braces, expr: {op: call, expr: "in_it_block()"}}
      - {op: logical_not, expr: {op: braces, expr: {op: call, expr: "last_in_it_block()"}}}
    then: {op: return, expr: "Unpredictable(code)"}

  # if $x=13 || $x == 15 then UNPREDICTABLE;
  unpred_if_x_sp_or_d_pc:
    op: if
    cond:
      op: logical_or
      args:
      - {op: is_equal, left: $x, right: 13}
      - {op: is_equal, left: $x, right: 15}
    then: {op: return, expr: Unpredictable(code)}

  # if $x=13 || $x == 15 || $y==13 || $y ==15 then UNPREDICTABLE;
  unpred_if_x_sp_or_x_pc_or_y_sp_or_y_pc:
    op: if
    cond:
      op: logical_or
      args:
      - {op: braces, expr: {op: is_equal, left: "$x", right: "13"}}
      - {op: braces, expr: {op: is_equal, left: "$x", right: "15"}}
      - {op: braces, expr: {op: is_equal, left: "$y", right: "13"}}
      - {op: braces, expr: {op: is_equal, left: "$y", right: "15"}}
    then: {op: return, expr: Unpredictable(code)}

  # if $x=13 || ($x == 15 && set_flag) || $y ==15 then UNPREDICTABLE;
  unpred_if_x_sp_or_x_pc_S_or_y_pc:
    op: if
    cond:
      op: logical_or
      args:
      - {op: braces, expr: {op: is_equal, left: "$x", right: "13"}}
      - op: braces
        expr:
          op: logical_and
          args:
          - {op: braces, expr: {op: is_equal, left: "$x", right: "15"}}
          - {op: braces, expr: {op: call, expr: "is_set_bit()"}}
      - {op: braces, expr: {op: is_equal, left: "$y", right: "15"}}
    then: {op: return, expr: Unpredictable(code)}

  # if $x=13 || $x == 15 || $y==13 || $y ==15 || $z==13 || $z ==15 then UNPREDICTABLE;
  unpred_if_x_sp_or_x_pc_or_y_sp_or_y_pc_or_z_sp_or_z_pc:
    op: if
    cond:
      op: logical_or
      args:
      - {op: braces, expr: {op: is_equal, left: "$x", right: "13"}}
      - {op: braces, expr: {op: is_equal, left: "$x", right: "15"}}
      - {op: braces, expr: {op: is_equal, left: "$y", right: "13"}}
      - {op: braces, expr: {op: is_equal, left: "$y", right: "15"}}
      - {op: braces, expr: {op: is_equal, left: "$z", right: "13"}}
      - {op: braces, expr: {op: is_equal, left: "$z", right: "15"}}
    then: {op: return, expr: Unpredictable(code)}

  # imm32
  # ===
  
  ThumbExpandImm_C:
    op: if
    cond: {op: is_equal, left: {op: call, expr: "extract_bit(val=$imm12, msb=11, lsb=10)"}, right: "0b00"}
    then:
      op: seq
      exprs:
      - op: assign
        target: "_in8"
        expr: {op: call, expr: "extract_bit(val=$imm12, msb=7, lsb=0)"}
        comment: "$in[7:0]"
      - op: assign
        target: "_cond"
        expr: {op: call, expr: "extract_bit(val=$imm12, msb=9, lsb=8)"}
        comment: "$imm12[9:8]"
      - op: switch
        var: "_cond"
        case:
        - when: "0b00"
          then: {op: assign, target: $res, expr: _in8}
        - when: "0b01"
          then:
            op: seq
            exprs:
            - op: if
              cond: {op: is_equal, left: _in8, right: "0"}
              then: {op: return, expr: Unpredictable(code)}
            - op: assign
              target: $res
              expr:
                op: or
                args:
                - {op: braces, expr: {op: shiftleft, left: _in8, right: 16}}
                - {op: braces, expr: {op: shiftleft, left: _in8, right: 0}}

        - when: "0b10"
          then:
            op: seq
            exprs:
            - op: if
              cond: {op: is_equal, left: _in8, right: "0"}
              then: {op: return, expr: Unpredictable(code)}
            - op: assign
              target: $res
              expr:
                op: or
                args:
                - {op: braces, expr: {op: shiftleft, left: _in8, right: 24}}
                - {op: braces, expr: {op: shiftleft, left: _in8, right: 8}}

        - when: "0b11"
          then:
            op: seq
            exprs:
            - op: if
              cond: {op: is_equal, left: _in8, right: "0"}
              then: {op: return, expr: Unpredictable(code)}
            - op: assign
              target: $res
              expr:
                op: or
                args:
                - {op: braces, expr: {op: shiftleft, left: _in8, right: 24}}
                - {op: braces, expr: {op: shiftleft, left: _in8, right: 16}}
                - {op: braces, expr: {op: shiftleft, left: _in8, right: 8}}
                - {op: braces, expr: {op: shiftleft, left: _in8, right: 0}}
      - {op: assign, target: $carry_out, expr: $carry_in}
    else:
      op: seq
      exprs:
        - op: assign
          target: _unrotated_value
          expr:
            op: or
            args:
            - "0x80"
            - {op: braces, expr: {op: and, args: [$imm12, "0x7F"]}}
        - op: assign
          target: _shift
          expr: {op: call, expr: "extract_bit(val=$imm12, msb=11, lsb=7"}
          comment: "val[11:7]"
        - op: call
          expr: "ror_c(val=_unrotated_value, res=$res, carry_out=$carry_out, shift=_shift)"

  extract_imm32_thumb_expand:
    op: seq
    exprs:
      - {op: call, expr: "extract_bit_and_assign(res=_i, msb=l.10, lsb=l.10)"}
      - {op: call, expr: "extract_bit_and_assign(res=_imm3, msb=h.14, lsb=h.12)"}
      - {op: call, expr: "extract_bit_and_assign(res=_imm8, msb=h.7, lsb=h.0)"}
      - op: assign
        target: _imm12
        expr:
          op: or
          args:
          - {op: braces, expr: {op: shiftleft, left: _i, right: 11}}
          - {op: braces, expr: {op: shiftleft, left: _imm3, right: 8}}
          - {op: braces, expr: {op: shiftleft, left: _imm8, right: 0}}
      - {op: assign, target: _carry_in, expr: {op: call, expr: "get_apsr_carry()"}}
      - {op: call, expr: "ThumbExpandImm_C(res=imm32, carry_out=_carry_out, carry_in=_carry_in,  imm12=_imm12)"}

  extract_imm32_thumb_expand_with_carry:
    op: seq
    exprs:
      - {op: call, expr: "extract_bit_and_assign(res=_i, msb=l.10, lsb=l.10)"}
      - {op: call, expr: "extract_bit_and_assign(res=_imm3, msb=h.14, lsb=h.12)"}
      - {op: call, expr: "extract_bit_and_assign(res=_imm8, msb=h.7, lsb=h.0)"}
      - op: assign
        target: _imm12
        expr:
          op: or
          args:
          - {op: braces, expr: {op: shiftleft, left: _i, right: 11}}
          - {op: braces, expr: {op: shiftleft, left: _imm3, right: 8}}
          - {op: braces, expr: {op: shiftleft, left: _imm8, right: 0}}
      - {op: assign, target: _carry_in, expr: {op: call, expr: "get_apsr_carry()"}}
      - {op: call, expr: "ThumbExpandImm_C(res=imm32, carry_out=carry, carry_in=_carry_in,  imm12=_imm12)"}
      - {op: if, cond: carry, then: {op: call, expr: "append_flags_carry()"}}

  extract_imm32_long_branch:
    op: seq
    exprs:
    - {op: call, expr: "extract_bit_and_assign(res=_s, msb=l.10, lsb=l.10)"}
    - {op: call, expr: "extract_bit_and_assign(res=_imm10, msb=l.9, lsb=l.0)"}
    - {op: call, expr: "extract_bit_and_assign(res=_j1, msb=h.13, lsb=h.13)"}
    - {op: call, expr: "extract_bit_and_assign(res=_j2, msb=h.11, lsb=h.11)"}
    - {op: call, expr: "extract_bit_and_assign(res=_imm11, msb=h.10, lsb=h.0)"}
    - {op: call, expr: "lsb_equal_and_assign(res=_i1, a=_j1, b=_s)"}
    - {op: call, expr: "lsb_equal_and_assign(res=_i2, a=_j2, b=_s)"}
    - op: assign
      target: _imm32_us
      expr:
        op: or
        args:
        - {op: braces, expr: {op: shiftleft, left: _s, right: 24}}
        - {op: braces, expr: {op: shiftleft, left: _i1, right: 23}}
        - {op: braces, expr: {op: shiftleft, left: _i2, right: 22}}
        - {op: braces, expr: {op: shiftleft, left: _imm10, right: 12}}
        - {op: braces, expr: {op: shiftleft, left: _imm11, right: 1}}
    - {op: call, expr: "sign_extend_and_assign(res=imm32, value=_imm32_us, sign_bit=24)"}

  extract_imm32_16bit_parts:
    op: seq
    exprs:
    - {op: call, expr: "extract_bit_and_assign(res=_imm8, msb=h.7, lsb=h.0)"}
    - {op: call, expr: "extract_bit_and_assign(res=_imm3, msb=h.14, lsb=h.12)"}
    - {op: call, expr: "extract_bit_and_assign(res=_imm4, msb=l.3, lsb=l.0)"}
    - {op: call, expr: "extract_bit_and_assign(res=_i, msb=l.10, lsb=l.10)"}
    - op: assign
      target: imm32
      expr:
        op: or
        args:
        - {op: braces, expr: {op: shiftleft, left: _imm4, right: 12}}
        - {op: braces, expr: {op: shiftleft, left: _i, right: 11}}
        - {op: braces, expr: {op: shiftleft, left: _imm3, right: 8}}
        - {op: braces, expr: {op: shiftleft, left: _imm8, right: 0}}

  extract_imm32_16bit_7_0_sl2:
    op: assign
    target: imm32
    expr:
      op: shiftleft
      left: {op: braces, expr: {op: call, expr: "extract_bit(val=code, msb=l.7, lsb=l.0)"}}
      right: 2
      
  extract_imm32_16bit_7_0: {op: assign, target: imm32, expr: {op: call, expr: "extract_bit(val=code, res=imm32, msb=l.7, lsb=l.0)"}}
  extract_imm32_11_0: {op: assign, target: imm32, expr: {op: call, expr: "extract_bit(val=code, res=imm32, msb=11, lsb=0)"}}

  # shift_n
  # ===
  extract_shift_n_imm_2_3:
    op: seq
    exprs:
    - {op: call, expr: "extract_bit_and_assign(res=_imm2, msb=h.7, lsb=h.6)"}
    - {op: call, expr: "extract_bit_and_assign(res=_imm3, msb=h.14, lsb=h.12)"}
    - {op: assign, target: cond, expr: "0b01"}
    - op: assign
      target: imm5
      expr:
        op: or
        args:
        - {op: braces, expr: {op: shiftleft, left: _imm2, right: 0}}
        - {op: braces, expr: {op: shiftleft, left: _imm3, right: 2}}
    - {op: call, expr: "DecodeImmShift(cond=cond, shift_t=_shift_t, shift_n=shift_n, imm5=imm5)"}

  extract_shift_n_shift_t_imm_2_3:
    op: seq
    exprs:
    - {op: call, expr: "extract_bit_and_assign(res=_imm2, msb=h.7, lsb=h.6)"}
    - {op: call, expr: "extract_bit_and_assign(res=_imm3, msb=h.14, lsb=h.12)"}
    - {op: call, expr: "extract_bit_and_assign(res=_type, msb=h.5, lsb=h.4)"}
    - op: assign
      target: imm5
      expr:
        op: or
        args:
        - {op: braces, expr: {op: shiftleft, left: _imm2, right: 0}}
        - {op: braces, expr: {op: shiftleft, left: _imm3, right: 2}}
    - {op: call, expr: "DecodeImmShift(cond=_type, shift_t=shift_t, shift_n=shift_n, imm5=imm5)"}


  extract_shift_n_16bit_imm5:
    op: seq
    exprs:
    - {op: call, expr: "extract_bit_and_assign(res=imm5, msb=l.10, lsb=l.6)"}
    - {op: assign, target: cond, expr: "0b01"}
    - {op: call, expr: "DecodeImmShift(cond=cond, shift_t=_type, shift_n=shift_n, imm5=imm5)"}
  
  # Register d
  # ===
  extract_d_16bit_2_0: {op: assign, target: d, expr: {op: call, expr: "extract_bit(val=code, res=d, msb=l.2, lsb=l.0)"}}
  extract_d_16bit_10_8: {op: assign, target: d, expr: {op: call, expr: "extract_bit(val=code, res=d, msb=l.10, lsb=l.8)"}}
  extract_d_16bit_7_7_2_0:
    op: assign
    target: d
    expr:
      op: or
      args:
      - op: braces
        expr:
          op: shiftleft
          left:
            op: braces
            expr: {op: call, expr: "extract_bit(val=code, res=d, msb=l.7, lsb=l.7)"}
          right: 2
      - {op: braces, expr: {op: call, expr: "extract_bit(val=code, res=d, msb=l.2, lsb=l.0)"}}
    comment: "(code[7:7] <<3) | code[2:0]"
  extract_d_11_8: {op: assign, target: d, expr: {op: call, expr: "extract_bit(val=code, res=d, msb=h.11, lsb=h.8)"}}  


  # Register t
  # ===
  extract_t_16bit_10_8: {op: assign, target: t, expr: {op: call, expr: "extract_bit(val=code, msb=l.10, lsb=l.8)"}}
  extract_t_15_12: {op: assign, target: t, expr: {op: call, expr: "extract_bit(val=code, res=t, msb=h.15, lsb=h.12)"}}

  # Register m
  # ===
  extract_m_3_0: {op: assign, target: m, expr: {op: call, expr: "extract_bit(val=code, msb=h.3, lsb=h.0)"}}
  extract_m_16bit_5_3: {op: assign, target: m, expr: {op: call, expr: "extract_bit(val=code, msb=l.5, lsb=l.3)"}}
  extract_m_16bit_6_3: {op: assign, target: m, expr: {op: call, expr: "extract_bit(val=code, msb=l.6, lsb=l.3)"}}

  # Register n
  # ===
  extract_n_19_16: {op: assign, target: n, expr: {op: call, expr: "extract_bit(val=code, msb=l.3, lsb=l.0)"}}
  
patterns:

  # AdcImmediate
  11110x01010xxxxx0xxxxxxxxxxxxxxx: {name: adc_immediate_t1, to: AdcImmediate, call: [set_flags_32bit(), append_flags_set_s_20(), extract_d_11_8(), extract_n_19_16(), extract_imm32_thumb_expand(), "unpred_if_x_sp_or_x_pc_or_y_sp_or_y_pc(x=d, y=n)" ]}

  # AdcRegister
  0100000101xxxxxx: {name: adc_register_t1, to: AdcRegister, call: [set_flags_16bit()]}
  11101011010xxxxx0xxxxxxxxxxxxxxx: {name: adc_register_t2, to: AdcRegister, call: [set_flags_32bit(), append_flags_set_s_20(), extract_n_19_16(), extract_d_11_8(), extract_m_3_0(), extract_shift_n_shift_t_imm_2_3(), "unpred_if_x_sp_or_x_pc_or_y_sp_or_y_pc_or_z_sp_or_z_pc(x=n, y=m, z=d)"]}

  # AddRegister
  0001100xxxxxxxxx: {name: add_register_t1, to: AddRegister, call: [set_flags_16bit()]}
  01000100xxxxxxxx: {name: add_register_t2, to: AddRegister, call: [set_flags_16bit()]}
  11101011000xxxxx0xxxxxxxxxxxxxxx: {name: add_register_t3, to: AddRegister, call: [set_flags_32bit()]}

  # AddImmediate
  0001110xxxxxxxxx: {name: add_immediate_t1, to: AddImmediate, call: [set_flags_16bit()]}
  00110xxxxxxxxxxx: {name: add_immediate_t2, to: AddImmediate, call: [set_flags_16bit()]}
  11110x01000xxxxx0xxxxxxxxxxxxxxx: {name: add_immediate_t3, to: AddImmediate, call: [set_flags_32bit(), append_flags_set_s_20(), extract_n_19_16(), extract_d_11_8(), extract_imm32_thumb_expand(), "unpred_if_x_sp_or_x_pc_S_or_y_pc(x=d, y=n)"]}
  11110x10000xxxxx0xxxxxxxxxxxxxxx: {name: add_immediate_t4, to: AddImmediate, call: [set_flags_32bit()]}

  # AddPcPlusImmediate
  10100xxxxxxxxxxx: {name: add_pc_plus_immediate_t1, to: AddPcPlusImmediate, call: [set_flags_16bit(), append_flags_add(), extract_d_16bit_10_8(), extract_imm32_16bit_7_0_sl2()]}

  # SubRegister
  0001101xxxxxxxxx: {name: sub_register_t1, to: SubRegister, call: [set_flags_16bit()]}
  11101011101xxxxx0xxxxxxxxxxxxxxx: {name: sub_register_t2, to: SubRegister, call: [set_flags_32bit()]}

  # SubImmediate
  0001111xxxxxxxxx: {name: sub_immediate_t1, to: SubImmediate, call: [set_flags_16bit()]}
  00111xxxxxxxxxxx: {name: sub_immediate_t2, to: SubImmediate, call: [set_flags_16bit()]}
  11110x01101xxxxx0xxxxxxxxxxxxxxx: {name: sub_immediate_t3, to: SubImmediate, call: [set_flags_32bit()]}
  11110x101010xxxx0xxxxxxxxxxxxxxx: {name: sub_immediate_t4, to: SubImmediate, call: [set_flags_32bit()]}

  # CmpRegister
  0100001010xxxxxx: {name: cmp_register_t1, to: CmpRegister, call: [set_flags_16bit()]}
  01000101xxxxxxxx: {name: cmp_register_t2, to: CmpRegister, call: [set_flags_16bit()]}
  111010111011xxxx0xxx1111xxxxxxxx: {name: cmp_register_t3, to: CmpRegister, call: [set_flags_32bit()]}

  # CmpImmediate
  00101xxxxxxxxxxx: {name: cmp_immediate_t1, to: CmpImmediate, call: [set_flags_16bit()]}
  11110x011011xxxx0xxx1111xxxxxxxx: {name: cmp_immediate_t2, to: CmpImmediate, call: [set_flags_32bit()]}

  # MovRegister
  01000110xxxxxxxx: {name: mov_register_t1, to: MovRegister, call: [set_flags_16bit(), extract_d_16bit_7_7_2_0(), extract_m_16bit_6_3(), unpred_if_x_pc_it_block_not_last_in_it_block(x=d)]}
  0000000000xxxxxx: {name: mov_register_t2, to: MovRegister, call: [set_flags_16bit()]}
  11101010010x11110000xxxx0000xxxx: {name: mov_register_t3, to: MovRegister, call: [set_flags_32bit()]}

  # MovImmediate
  00100xxxxxxxxxxx: {name: mov_immediate_t1, to: MovImmediate, call: [set_flags_16bit(), append_flags_set_not_it_block(), append_flags_carry_if_apsr_c(), extract_d_16bit_10_8(), extract_imm32_16bit_7_0()]}
  11110x00010x11110xxxxxxxxxxxxxxx: {name: mov_immediate_t2, to: MovImmediate, call: [set_flags_32bit(), extract_d_11_8(), extract_imm32_thumb_expand_with_carry(), unpred_if_x_sp_or_d_pc(x=d)]}
  11110x100100xxxx0xxxxxxxxxxxxxxx: {name: mov_immediate_t3, to: MovImmediate, call: [set_flags_32bit(), extract_d_11_8(), extract_imm32_16bit_parts(), unpred_if_x_sp_or_d_pc(x=d)]}

  # LdrLiteral
  01001xxxxxxxxxxx: {name: ldr_literal_t1, to: LdrLiteral, call: [set_flags_16bit(), append_flags_add(), extract_t_16bit_10_8(), extract_imm32_16bit_7_0_sl2() ]}
  11111000x1011111xxxxxxxxxxxxxxxx: {name: ldr_literal_t2, to: LdrLiteral, call: [set_flags_32bit(), append_flags_add_u_23(), extract_t_15_12(), extract_imm32_11_0(), unpred_if_x_pc_it_block_not_last_in_it_block(x=t)]}

  # LdrImmediate
  01101xxxxxxxxxxx: {name: ldr_immediate_t1, to: LdrImmediate, call: [set_flags_16bit()]}
  10011xxxxxxxxxxx: {name: ldr_immediate_t2, to: LdrImmediate, call: [set_flags_16bit()]}
  111110001101xxxxxxxxxxxxxxxxxxxx: {name: ldr_immediate_t3, to: LdrImmediate, call: [set_flags_32bit()]}
  111110000101xxxxxxxx1xxxxxxxxxxx: {name: ldr_immediate_t4, to: LdrImmediate, call: [set_flags_32bit()]}

  # StrImmediate
  01100xxxxxxxxxxx: {name: str_immediate_t1, to: StrImmediate, call: [set_flags_16bit()]}
  10010xxxxxxxxxxx: {name: str_immediate_t2, to: StrImmediate, call: [set_flags_16bit()]}
  111110001100xxxxxxxxxxxxxxxxxxxx: {name: str_immediate_t3, to: StrImmediate, call: [set_flags_32bit()]}
  111110000100xxxxxxxx1xxxxxxxxxxx: {name: str_immediate_t4, to: StrImmediate, call: [set_flags_32bit()]}

  # LslImmediate
  00000xxxxxxxxxxx: {name: lsl_immediate_t1, to: LslImmediate, call: [set_flags_16bit()]}
  11101010010x11110xxxxxxxxx00xxxx: {name: lsl_immediate_t2, to: LslImmediate, call: [set_flags_32bit()]}

  # LsrImmediate
  00001xxxxxxxxxxx: {name: lsr_immediate_t1, to: LsrImmediate, call: [set_flags_16bit(),  append_flags_set_not_it_block(), extract_d_16bit_2_0(),  extract_m_16bit_5_3(), extract_shift_n_16bit_imm5()]}
  11101010010x11110xxxxxxxxx01xxxx: {name: lsr_immediate_t2, to: LsrImmediate, call: [set_flags_32bit(), extract_d_11_8(), extract_m_3_0(), extract_shift_n_imm_2_3(), append_flags_set_s_20()]}

  # AsrImmediate
  00010xxxxxxxxxxx: {name: asr_immediate_t1, to: AsrImmediate, call: [set_flags_16bit()]}
  11101010010x11110xxxxxxxxx10xxxx: {name: asr_immediate_t2, to: AsrImmediate, call: [set_flags_32bit()]}

  # AndRegister
  0100000000xxxxxx: {name: and_register_t1, to: AndRegister, call: [set_flags_16bit()]}
  11101010000xxxxx0xxxxxxxxxxxxxxx: {name: and_register_t2, to: AndRegister, call: [set_flags_32bit()]}

  # EorRegister
  0100000001xxxxxx: {name: eor_register_t1, to: EorRegister, call: [set_flags_16bit()]}
  11101010100xxxxx0xxxxxxxxxxxxxxx: {name: eor_register_t2, to: EorRegister, call: [set_flags_32bit()]}

  # LslRegister
  0100000010xxxxxx: {name: lsl_register_t1, to: LslRegister, call: [set_flags_16bit()]}
  11111010000xxxxx1111xxxx0000xxxx: {name: lsl_register_t2, to: LslRegister, call: [set_flags_32bit()]}

  # LsrRegister
  0100000011xxxxxx: {name: lsr_register_t1, to: LsrRegister, call: [set_flags_16bit()]}
  11111010001xxxxx1111xxxx0000xxxx: {name: lsr_register_t2, to: LsrRegister, call: [set_flags_32bit()]}

  # AsrRegister
  0100000100xxxxxx: {name: asr_register_t1, to: AsrRegister, call: [set_flags_16bit()]}
  11111010010xxxxx1111xxxx0000xxxx: {name: asr_register_t2, to: AsrRegister, call: [set_flags_32bit()]}

  # StrRegister
  0101000xxxxxxxxx: {name: str_register_t1, to: StrRegister, call: [set_flags_16bit()]}
  111110000100xxxxxxxx000000xxxxxx: {name: str_register_t2, to: StrRegister, call: [set_flags_32bit()]}

  # AddSpPlusImmediate
  10101xxxxxxxxxxx: {name: add_sp_plus_immediate_t1, to: AddSpPlusImmediate, call: [set_flags_16bit()]}
  101100000xxxxxxx: {name: add_sp_plus_immediate_t2, to: AddSpPlusImmediate, call: [set_flags_16bit()]}
  11110x01000x11010xxxxxxxxxxxxxxx: {name: add_sp_plus_immediate_t3, to: AddSpPlusImmediate, call: [set_flags_32bit()]}
  11110x10000011010xxxxxxxxxxxxxxx: {name: add_sp_plus_immediate_t4, to: AddSpPlusImmediate, call: [set_flags_32bit()]}

  # B
  1101xxxxxxxxxxxx: {name: b_t1, to: B, call: [set_flags_16bit()]}
  11100xxxxxxxxxxx: {name: b_t2, to: B, call: [set_flags_16bit()]}
  11110xxxxxxxxxxx10x0xxxxxxxxxxxx: {name: b_t3, to: B, call: [set_flags_32bit()]}
  11110xxxxxxxxxxx10x1xxxxxxxxxxxx: {name: b_t4, to: B, call: [set_flags_32bit()]}

  # Push
  1011010xxxxxxxxx: {name: push_t1, to: Push, call: [set_flags_16bit()]}
  11101001001011010x0xxxxxxxxxxxxx: {name: push_t2, to: Push, call: [set_flags_32bit()]}
  1111100001001101xxxx110100000100: {name: push_t3, to: Push, call: [set_flags_32bit()]}

  # Pop
  1011110xxxxxxxxx: {name: pop_t1, to: Pop, call: [set_flags_16bit()]}
  1110100010111101xx0xxxxxxxxxxxxx: {name: pop_t2, to: Pop, call: [set_flags_32bit()]}
  1111100001011101xxxx101100000100: {name: pop_t3, to: Pop, call: [set_flags_32bit()]}

  # SubSpMinusImmediate
  101100001xxxxxxx: {name: sub_sp_minus_immediate_t1, to: SubSpMinusImmediate, call: [set_flags_16bit()]}
  11110x01101x11010xxxxxxxxxxxxxxx: {name: sub_sp_minus_immediate_t2, to: SubSpMinusImmediate, call: [set_flags_32bit()]}
  11110x10101011010xxxxxxxxxxxxxxx: {name: sub_sp_minus_immediate_t3, to: SubSpMinusImmediate, call: [set_flags_32bit()]}

  # StrbImmediate
  01110xxxxxxxxxxx: {name: strb_immediate_t1, to: StrbImmediate, call: [set_flags_16bit()]}
  111110001000xxxxxxxxxxxxxxxxxxxx: {name: strb_immediate_t2, to: StrbImmediate, call: [set_flags_32bit()]}
  111110000000xxxxxxxx1xxxxxxxxxxx: {name: strb_immediate_t3, to: StrbImmediate, call: [set_flags_32bit()]}

  
  # StrhImmediate
  10000xxxxxxxxxxx: {name: strh_immediate_t1, to: StrhImmediate, call: [set_flags_16bit()]}
  111110001010xxxxxxxxxxxxxxxxxxxx: {name: strh_immediate_t2, to: StrhImmediate, call: [set_flags_32bit()]}
  111110000010xxxxxxxx1xxxxxxxxxxx: {name: strh_immediate_t3, to: StrhImmediate, call: [set_flags_32bit()]}

  # LdrsbImmediate
  111110011001xxxxxxxxxxxxxxxxxxxx: {name: ldrsb_immediate_t1, to: LdrsbImmediate, call: [set_flags_32bit()]}
  111110010001xxxxxxxx1xxxxxxxxxxx: {name: ldrsb_immediate_t2, to: LdrsbImmediate, call: [set_flags_32bit()]}

  # LdrshImmediate
  111110011011xxxxxxxxxxxxxxxxxxxx: {name: ldrsh_immediate_t1, to: LdrshImmediate, call: [set_flags_32bit()]}
  111110010011xxxxxxxx1xxxxxxxxxxx: {name: ldrsh_immediate_t2, to: LdrshImmediate, call: [set_flags_32bit()]}

  # LdrbImmediate
  01111xxxxxxxxxxx: {name: ldrb_immediate_t1, to: LdrbImmediate, call: [set_flags_16bit()]}
  111110001001xxxxxxxxxxxxxxxxxxxx: {name: ldrb_immediate_t2, to: LdrbImmediate, call: [set_flags_32bit()]}
  111110000001xxxxxxxx1xxxxxxxxxxx: {name: ldrb_immediate_t3, to: LdrbImmediate, call: [set_flags_32bit()]}

  # LdrhImmediate
  10001xxxxxxxxxxx: {name: ldrh_immediate_t1, to: LdrhImmediate, call: [set_flags_16bit()]}
  111110001011xxxxxxxxxxxxxxxxxxxx: {name: ldrh_immediate_t2, to: LdrhImmediate, call: [set_flags_32bit()]}
  111110000011xxxxxxxx1xxxxxxxxxxx: {name: ldrh_immediate_t3, to: LdrhImmediate, call: [set_flags_32bit()]}

  # TstRegister
  0100001000xxxxxx: {name: tst_register_t1, to: TstRegister, call: [set_flags_16bit()]}

  # RsbImmediate
  0100001001xxxxxx: {name: rsb_immediate_t1, to: RsbImmediate, call: [set_flags_16bit()]}
  11110x01110xxxxx0xxxxxxxxxxxxxxx: {name: rsb_immediate_t2, to: RsbImmediate, call: [set_flags_32bit()]}

  # OrrRegister
  0100001100xxxxxx: {name: orr_register_t1, to: OrrRegister, call: [set_flags_16bit()]}
  11101010010xxxxx0xxxxxxxxxxxxxxx: {name: orr_register_t2, to: OrrRegister, call: [set_flags_32bit()]}

  # BicRegister
  0100001110xxxxxx: {name: bic_register_t1, to: BicRegister, call: [set_flags_16bit()]}
  11101010001xxxxx0xxxxxxxxxxxxxxx: {name: bic_register_t2, to: BicRegister, call: [set_flags_32bit()]}

  # Bx
  010001110xxxxxxx: {name: bx_t1, to: Bx, call: [set_flags_16bit()]}

  # Blx
  010001111xxxxxxx: {name: blx_t1, to: Blx, call: [set_flags_16bit()]}

  # StrbRegister
  0101010xxxxxxxxx: {name: strb_register_t1, to: StrbRegister, call: [set_flags_16bit()]}
  111110000000xxxxxxxx000000xxxxxx: {name: strb_register_t2, to: StrbRegister, call: [set_flags_32bit()]}

  # LdrRegister
  0101100xxxxxxxxx: {name: ldr_register_t1, to: LdrRegister, call: [set_flags_16bit()]}
  111110000101xxxxxxxx000000xxxxxx: {name: ldr_register_t2, to: LdrRegister, call: [set_flags_32bit()]}

  # LdrbRegister
  0101110xxxxxxxxx: {name: ldrb_register_t1, to: LdrbRegister, call: [set_flags_16bit()]}

  # StrhRegister
  111110000010xxxxxxxx000000xxxxxx: {name: strh_register_t2, to: StrhRegister, call: [set_flags_32bit()]}

  # SbcRegister
  11101011011xxxxx0xxxxxxxxxxxxxxx: {name: sbc_register_t2, to: SbcRegister, call: [set_flags_32bit()]}

  # Stm
  11000xxxxxxxxxxx: {name: stm_t1, to: Stm, call: [set_flags_16bit()]}
  1110100010x0xxxx0x0xxxxxxxxxxxxx: {name: stm_t2, to: Stm, call: [set_flags_32bit()]}

  # Ldm
  11001xxxxxxxxxxx: {name: ldm_t1, to: Ldm, call: [set_flags_16bit()]}
  1110100010x1xxxxxx0xxxxxxxxxxxxx: {name: ldm_t2, to: Ldm, call: [set_flags_32bit()]}

  # MvnRegister
  11101010011x11110xxxxxxxxxxxxxxx: {name: mvn_register_t2, to: MvnRegister, call: [set_flags_32bit()]}

  # Sxth
  1011001000xxxxxx: {name: sxth_t1, to: Sxth, call: [set_flags_16bit()]}
  11111010000011111111xxxx10xxxxxx: {name: sxth_t2, to: Sxth, call: [set_flags_32bit()]}

  # Sxtb
  1011001001xxxxxx: {name: sxtb_t1, to: Sxtb, call: [set_flags_16bit()]}
  11111010010011111111xxxx10xxxxxx: {name: sxtb_t2, to: Sxtb, call: [set_flags_32bit()]}

  # Uxth
  1011001010xxxxxx: {name: uxth_t1, to: Uxth, call: [set_flags_16bit()]}
  11111010000111111111xxxx10xxxxxx: {name: uxth_t2, to: Uxth, call: [set_flags_32bit()]}

  # Uxtb
  1011001011xxxxxx: {name: uxtb_t1, to: Uxtb, call: [set_flags_16bit()]}
  11111010010111111111xxxx10xxxxxx: {name: uxtb_t2, to: Uxtb, call: [set_flags_32bit()]}


  # Bkpt
  10111110xxxxxxxx: {name: bkpt_t1, to: Bkpt, call: [set_flags_16bit(),  extract_imm32_16bit_7_0() ]}

  # Nop
  1011111100000000: {name: nop_t1, to: Nop, call: [set_flags_16bit()]}
  11110011101011111000000000000000: {name: nop_t2, to: Nop, call: [set_flags_32bit()]}

  # It
  10111111xxxxxxxx: {name: it_t1, to: It, call: [set_flags_16bit()]}

  # CbNZ
  1011x0x1xxxxxxxx: {name: cb_n_z_t1, to: CbNZ, call: [set_flags_16bit()]}

  # Svc
  11011111xxxxxxxx: {name: svc_t1, to: Svc, call: [set_flags_16bit()]}

  # Strex
  111010000100xxxxxxxxxxxxxxxxxxxx: {name: strex_t1, to: Strex, call: [set_flags_32bit()]}

  # Ldrex
  111010000101xxxxxxxx1111xxxxxxxx: {name: ldrex_t1, to: Ldrex, call: [set_flags_32bit()]}

  # TbbH
  111010001101xxxx11110000000xxxxx: {name: tbb_h_t1, to: TbbH, call: [set_flags_32bit()]}

  # Stmdb
  1110100100x0xxxx0x0xxxxxxxxxxxxx: {name: stmdb_t1, to: Stmdb, call: [set_flags_32bit()]}

  # StrdImmediate
  1110100xx1x0xxxxxxxxxxxxxxxxxxxx: {name: strd_immediate_t1, to: StrdImmediate, call: [set_flags_32bit()]}

  # LdrdImmediate
  1110100xx1x1xxxxxxxxxxxxxxxxxxxx: {name: ldrd_immediate_t1, to: LdrdImmediate, call: [set_flags_32bit()]}

  # Rrx
  11101010010x11110000xxxx0011xxxx: {name: rrx_t1, to: Rrx, call: [set_flags_32bit()]}

  # TeqRegister
  111010101001xxxx0xxx1111xxxxxxxx: {name: teq_register_t1, to: TeqRegister, call: [set_flags_32bit()]}

  # RsbRegister
  11101011110xxxxx0xxxxxxxxxxxxxxx: {name: rsb_register_t1, to: RsbRegister, call: [set_flags_32bit()]}

  # Bfi
  111100110110xxxx0xxxxxxxxx0xxxxx: {name: bfi_t1, to: Bfi, call: [set_flags_32bit()]}

  # Msr
  111100111000xxxx1000xx00xxxxxxxx: {name: msr_t1, to: Msr, call: [set_flags_32bit()]}

  # Dmb
  1111001110111111100011110101xxxx: {name: dmb_t1, to: Dmb, call: [set_flags_32bit()]}

  # Ubfx
  111100111100xxxx0xxxxxxxxx0xxxxx: {name: ubfx_t1, to: Ubfx, call: [set_flags_32bit()]}

  # Mrs
  11110011111011111000xxxxxxxxxxxx: {name: mrs_t1, to: Mrs, call: [set_flags_32bit()]}

  # TstImmediate
  11110x000001xxxx0xxx1111xxxxxxxx: {name: tst_immediate_t1, to: TstImmediate, call: [set_flags_32bit()]}

  # AndImmediate
  11110x00000xxxxx0xxxxxxxxxxxxxxx: {name: and_immediate_t1, to: AndImmediate, call: [set_flags_32bit()]}

  # BicImmediate
  11110x00001xxxxx0xxxxxxxxxxxxxxx: {name: bic_immediate_t1, to: BicImmediate, call: [set_flags_32bit()]}

  # OrrImmediate
  11110x00010xxxxx0xxxxxxxxxxxxxxx: {name: orr_immediate_t1, to: OrrImmediate, call: [set_flags_32bit()]}

  # MvnImmediate
  11110x00011x11110xxxxxxxxxxxxxxx: {name: mvn_immediate_t1, to: MvnImmediate, call: [set_flags_32bit()]}

  # TeqImmediate
  11110x001001xxxx0xxx1111xxxxxxxx: {name: teq_immediate_t1, to: TeqImmediate, call: [set_flags_32bit()]}

  # EorImmediate
  11110x00100xxxxx0xxxxxxxxxxxxxxx: {name: eor_immediate_t1, to: EorImmediate, call: [set_flags_32bit()]}

  # CmnImmediate
  11110x010001xxxx0xxx1111xxxxxxxx: {name: cmn_immediate_t1, to: CmnImmediate, call: [set_flags_32bit()]}

  # SbcImmediate
  11110x01011xxxxx0xxxxxxxxxxxxxxx: {name: sbc_immediate_t1, to: SbcImmediate, call: [set_flags_32bit()]}

  # Bl
  11110xxxxxxxxxxx11x1xxxxxxxxxxxx: {name: bl_t1, to: Bl, call: [set_flags_32bit(), extract_imm32_long_branch(),  unpred_if_it_block_not_last_in_it_block()]}

  # LdrhRegister
  111110000011xxxxxxxx000000xxxxxx: {name: ldrh_register_t2, to: LdrhRegister, call: [set_flags_32bit()]}

  # Clz
  111110101011xxxx1111xxxx1000xxxx: {name: clz_t1, to: Clz, call: [set_flags_32bit()]}

  # Mul
  111110110000xxxx1111xxxx0000xxxx: {name: mul_t2, to: Mul, call: [set_flags_32bit()]}

  # Mla
  111110110000xxxxxxxxxxxx0000xxxx: {name: mla_t1, to: Mla, call: [set_flags_32bit()]}

  # Mls
  111110110000xxxxxxxxxxxx0001xxxx: {name: mls_t1, to: Mls, call: [set_flags_32bit()]}

  # Smull
  111110111000xxxxxxxxxxxx0000xxxx: {name: smull_t1, to: Smull, call: [set_flags_32bit()]}

  # Sdiv
  111110111001xxxx1111xxxx1111xxxx: {name: sdiv_t1, to: Sdiv, call: [set_flags_32bit()]}

  # Umull
  111110111010xxxxxxxxxxxx0000xxxx: {name: umull_t1, to: Umull, call: [set_flags_32bit()]}

  # Udiv
  111110111011xxxx1111xxxx1111xxxx: {name: udiv_t1, to: Udiv, call: [set_flags_32bit()]}

  # Umlal
  111110111110xxxxxxxxxxxx0000xxxx: {name: umlal_t1, to: Umlal, call: [set_flags_32bit()]}
