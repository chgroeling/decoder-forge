{%- macro match_pat(pat, first_child) -%}
    {% if first_child -%}
        if{{" "}}
    {%- else -%}
        elif{{" "}}
    {%- endif -%}

    (instr & {{-" 0x%x" % pat.fixedmask}}) == {{"0x%x" % pat.fixedbits-}}:  # {{pat}}
{%- endmacro -%}

{% macro gen_pat(pat, first_child, origin) -%}
    {{ match_pat(pat, first_child) }}
    {%- if "call" in pat_repo[origin] %}
        {%- for j in pat_repo[origin]['call'] %}
          {%- for line in tcall(j).split("\n") %}
        {{line }}
           {%- endfor -%}
        {%- endfor -%}
    {%- endif %}
    {%- if origin == None %}
    {%- else %}
        {%- if as_repo.pat_to_struct[origin].members|length == 0 %}
        # Pattern: "{{pat_repo[origin]["name"]}}" / "{{origin}}"     
        return {{as_repo.pat_to_struct[origin].name}}()
        {%- else %}
        # Pattern: "{{pat_repo[origin]["name"]}}" / "{{origin}}"
        return {{as_repo.pat_to_struct[origin].name}}(
            {%- for member in as_repo.pat_to_struct[origin].members -%}
            {{ member }}
            {%- if not loop.last -%},{{" "}}{%- endif -%}
            {%- endfor -%}
        )
        {%- endif %}
    {%- endif %}
{%- endmacro -%}

{% macro gen_pat_data(pat, first_child, data) -%}
    {{ match_pat(pat, first_child) }}
    {%- if data == None %}
    {%- else %}
        return {{data}}
    {%- endif %}
{%- endmacro -%}


{% macro no_match() -%}
    return Undef(instr)  # no match
{%- endmacro -%}

{% macro no_match_return_default() -%}
    return {{default_size}}  # no match
{%- endmacro -%}


from dataclasses import dataclass
{{""}}

@dataclass(eq=True)
class Context:
    {%- if context.members|length == 0 %}
    pass
    {%- else %}
        {%- for member in context.members %}
    {{ member }} : int = 0
        {%- endfor %}
    {%- endif %}
    {{""}}

{%- for struct in as_repo.structs %}
@dataclass(frozen=True, eq=True)
class {{struct.name}}:
    {%- if struct.members|length == 0 %}
    pass
    {%- else %}
        {%- for member in struct.members %}
    {{ member }} : int
        {%- endfor %}
    {%- endif %}
    {{""}}
{%- endfor -%}

{{""}}
def get_size_eval_bytes():
    return {{needed_bytes_for_size_eval}};
    
{{""}}
def decode_size(instr: int):
{%- for pat, uid, depth, first_child, last_child in sliced_flat_size_tree %}       
    {%- set size = size_dict[uid] | default(None) %}
    {{ gen_pat_data(pat, first_child, size) | indent(depth*4, first=True) }}
    {%- if loop.nextitem is defined %}
        {%- set backtrack = depth-loop.nextitem[2] %}
        {%- if backtrack > 0 %}
            {%- for bs in range(0, backtrack) %}
        {{no_match_return_default() | indent((depth-bs-1)*4, first=True)}}
            {%- endfor %}
        {%- endif %}
    {%- else %}
        {%- if depth>0 %}
        {{no_match_return_default() | indent((depth-1)*4, first=True)}}
        {%- endif %}               
    {%- endif %}
{%- endfor %}
    {{no_match_return_default()}}

{{""}}
def get_decoder_eval_bytes():
    return {{needed_bytes_for_code_eval}};

{{""}}
def decode(instr: int, context: Context):
{%- for pat, uid, depth, first_child, last_child in flat_decode_tree %}       
    {%- set origin = uid_to_pat[uid] | default(None) %}
    {{ gen_pat(pat, first_child, origin) | indent(depth*4, first=True) }}
    {%- if loop.nextitem is defined %}
        {%- set backtrack = depth-loop.nextitem[2] %}
        {%- if backtrack > 0 %}
            {%- for bs in range(0, backtrack) %}
        {{no_match() | indent((depth-bs-1)*4, first=True)}}
            {%- endfor %}
        {%- endif %}
    {%- else %}
        {%- if depth>0 %}
        {{no_match() | indent((depth-1)*4, first=True)}}
        {%- endif %}               
    {%- endif %}
{%- endfor %}
    {{no_match()}}
